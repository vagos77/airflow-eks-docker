INSERT ALL
  -- LINK_PLATFORM_SCENARIO
  WHEN (SELECT COUNT(*) FROM LINK_PLATFORM_SCENARIO WHERE MD5_LINK_PLATFORM_SCENARIO = MD5_LinkScenario) = 0
  THEN
    INTO LINK_PLATFORM_SCENARIO (
        MD5_LINK_PLATFORM_SCENARIO
      , MD5_HUB_AT_SCENARIO
      , MD5_HUB_AE_SCENARIO
      , AT_SCENARIO_ID
      , AE_SCENARIO_ID
      , LDTS
      , RSRC)
      VALUES (
        MD5_LinkScenario
      , MD5_HUB_AT_SCENARIO
      , MD5_HUB_AE_SCENARIO
      , AT_SCENARIO_ID
      , AE_SCENARIO_ID
      , LoadDTS
      , StageRecSrc)
  -- SAT_PLATFORM_SCENARIO_DETAILS
  WHEN (SELECT COUNT(*) FROM SAT_PLATFORM_SCENARIO_DETAILS WHERE MD5_LINK_PLATFORM_SCENARIO = MD5_LinkScenario AND HASH_DIFF = MD5_HashDiff) = 0
  THEN
    INTO SAT_PLATFORM_SCENARIO_DETAILS (
        MD5_LINK_PLATFORM_SCENARIO
      , HASH_DIFF
      , PLATFORM_SCENARIO_NAME
      , AT_SCENARIO_NAME
      , AE_SCENARIO_NAME
      , LDTS
      , RSRC)
      VALUES (
        MD5_LinkScenario
      , MD5_HashDiff
      , Platform_Scenario_Name
      , AT_Scenario_Name
      , AE_Scenario_Name
      , LoadDTS
      , StageRecSrc)

  -- AT scenarios with eventual AE data
SELECT DISTINCT
    MD5(UPPER(COALESCE(TO_VARCHAR(AT1.AT_SCENARIO_ID), '')
    || '^' || COALESCE(TO_VARCHAR(AE1.AE_SCENARIO_ID), '')
    )) AS MD5_LinkScenario
  , AT1.MD5_HUB_AT_SCENARIO
  , AE1.MD5_HUB_AE_SCENARIO
  , MD5(UPPER(COALESCE(AT1.PLATFORM_SCENARIO_NAME, '')
    || '^' || COALESCE(AT1.PLATFORM_SCENARIO_NAME, '')
    || '^' || COALESCE(AE1.PLATFORM_SCENARIO_NAME, '')
	)) AS MD5_HashDiff
  , AT1.AT_SCENARIO_ID
  , AE1.AE_SCENARIO_ID
  , AT1.PLATFORM_SCENARIO_NAME
  , AT1.PLATFORM_SCENARIO_NAME AS AT_SCENARIO_NAME
  , AE1.PLATFORM_SCENARIO_NAME AS AE_SCENARIO_NAME
  , COALESCE(AT1.LDTS, AE1.LDTS) AS LoadDTS
  , COALESCE(AT1.RSRC, AE1.RSRC) AS StageRecSrc
FROM
(
  -- subquery for AT data (grouping is needed to ignore entities with null values in Scenario ID, i.e. non-properties)
  SELECT
      ATSD.SCENARIO_CODE AS PLATFORM_SCENARIO_NAME
    , ATS.MD5_HUB_AT_SCENARIO
    , ATS.SCENARIO_ID AS AT_SCENARIO_ID
    , MAX(META.AE_SCENARIO_ID) AS AE_SCENARIO_ID
    , MAX(ATED.LDTS) AS LDTS
    , MAX(ATED.RSRC) AS RSRC
  FROM HUB_AT_SCENARIO ATS
  INNER JOIN SAT_AT_SCENARIO_DETAILS ATSD ON ATS.MD5_HUB_AT_SCENARIO = ATSD.MD5_HUB_AT_SCENARIO
  INNER JOIN HUB_AT_ENTITY ATE ON ATE.SCENARIO_ID = ATS.SCENARIO_ID
  INNER JOIN SAT_AT_ENTITY_DETAILS ATED ON ATE.MD5_HUB_AT_ENTITY = ATED.MD5_HUB_AT_ENTITY
  LEFT JOIN DATA_VAULT.LINK_AT_ENTITY_EXT_PROPERTY ATLX ON ATE.MD5_HUB_AT_ENTITY = ATLX.MD5_HUB_AT_ENTITY
  LEFT JOIN SAT_AT_METADATA_ENTITY META ON ATE.MD5_HUB_AT_ENTITY = META.MD5_HUB_AT_ENTITY
  GROUP BY ATSD.SCENARIO_CODE
    , ATS.MD5_HUB_AT_SCENARIO
    , ATS.SCENARIO_ID
) AT1
LEFT JOIN
(
  -- subquery for AE data
  SELECT DISTINCT
      AEFD.PORTFOLIO_NAME || ' • ' || AESD.SCENARIO_NAME AS PLATFORM_SCENARIO_NAME
    , AES.MD5_HUB_AE_SCENARIO
    , AES.SCENARIO_ID AS AE_SCENARIO_ID
    , AESD.LDTS AS LDTS
    , AESD.RSRC AS RSRC
  FROM HUB_AE_PORTFOLIO AEF
  INNER JOIN SAT_AE_PORTFOLIO_DETAILS AEFD ON AEF.MD5_HUB_AE_PORTFOLIO = AEFD.MD5_HUB_AE_PORTFOLIO
  INNER JOIN LINK_AE_SCENARIO_PORTFOLIO LAESF ON AEF.MD5_HUB_AE_PORTFOLIO = LAESF.MD5_HUB_AE_PORTFOLIO
  INNER JOIN HUB_AE_SCENARIO AES ON LAESF.MD5_HUB_AE_SCENARIO = AES.MD5_HUB_AE_SCENARIO
  INNER JOIN SAT_AE_SCENARIO_DETAILS AESD ON AES.MD5_HUB_AE_SCENARIO = AESD.MD5_HUB_AE_SCENARIO
) AE1
ON AE1.AE_SCENARIO_ID = AT1.AE_SCENARIO_ID

UNION

-- AE-only scenarios
SELECT DISTINCT
  MD5(UPPER(''
  || '^' || COALESCE(TO_VARCHAR(AE2.AE_SCENARIO_ID), '')
  )) AS MD5_LinkScenario
  , NULL AS MD5_HUB_AT_SCENARIO
  , AE2.MD5_HUB_AE_SCENARIO
  , MD5(UPPER(COALESCE(AE2.PLATFORM_SCENARIO_NAME, '')
    || '^' || ''
    || '^' || COALESCE(AE2.PLATFORM_SCENARIO_NAME, '')
	)) AS MD5_HashDiff
  , NULL AS AT_SCENARIO_ID
  , AE2.AE_SCENARIO_ID
  , AE2.PLATFORM_SCENARIO_NAME
  , NULL AS AT_SCENARIO_NAME
  , AE2.PLATFORM_SCENARIO_NAME AS AE_SCENARIO_NAME
  , AE2.LDTS AS LoadDTS
  , AE2.RSRC AS StageRecSrc
FROM
(
  -- subquery for AE data
  SELECT
      AEFD.PORTFOLIO_NAME || ' • ' || AESD.SCENARIO_NAME AS Platform_Scenario_Name
    , AES.MD5_HUB_AE_SCENARIO
    , AES.SCENARIO_ID AS AE_SCENARIO_ID
    , MAX(AESD.LDTS) AS LDTS
    , MAX(AESD.RSRC) AS RSRC
  FROM HUB_AE_PORTFOLIO AEF
  INNER JOIN SAT_AE_PORTFOLIO_DETAILS AEFD ON AEF.MD5_HUB_AE_PORTFOLIO = AEFD.MD5_HUB_AE_PORTFOLIO
  INNER JOIN LINK_AE_SCENARIO_PORTFOLIO LAESF ON AEF.MD5_HUB_AE_PORTFOLIO = LAESF.MD5_HUB_AE_PORTFOLIO
  INNER JOIN HUB_AE_SCENARIO AES ON LAESF.MD5_HUB_AE_SCENARIO = AES.MD5_HUB_AE_SCENARIO
  INNER JOIN SAT_AE_SCENARIO_DETAILS AESD ON AES.MD5_HUB_AE_SCENARIO = AESD.MD5_HUB_AE_SCENARIO
  GROUP BY
      AEFD.PORTFOLIO_NAME || ' • ' || AESD.SCENARIO_NAME
    , AES.MD5_HUB_AE_SCENARIO
    , AES.SCENARIO_ID 
) AE2
;

/* *********************************************************************************** */
/* *** Valid Version Scripts ********************************************************* */
/* *********************************************************************************** */

CREATE OR REPLACE TRANSIENT TABLE TRANSIENT_{SOURCE}_PROPERTY_VERSION AS (
  -- Taliance component to return all AE property keys and versions for a corresponding piece of Taliance entity metadata, AKA all AE property versions found somewhere in the AT data.
  SELECT DISTINCT
      aeep.MD5_HUB_AE_PROPERTY
      , atme.AE_PROPERTY_VERSION AS PROPERTY_VERSION
  FROM
      DATA_VAULT.SAT_AT_METADATA_ENTITY atme                                                                                                                 -- To get the property version number. Entities without a version number will be wiped out by the joins.
      INNER JOIN DATA_VAULT.LINK_AT_ENTITY_EXT_PROPERTY atep ON atme.MD5_HUB_AT_ENTITY = atep.MD5_HUB_AT_ENTITY                                              -- To get the external property hub key.
      INNER JOIN DATA_VAULT.LINK_AE_PROPERTY_EXT_PROPERTY aeep ON atep.MD5_HUB_EXTERNAL_PROPERTY = aeep.MD5_HUB_EXTERNAL_PROPERTY                            -- To get the AE property key, this isn't enough as the property exists in many scenarios...
      INNER JOIN DATA_VAULT.LINK_AE_PROPERTY_SCENARIO aeps ON aeep.MD5_HUB_AE_PROPERTY = aeps.MD5_HUB_AE_PROPERTY AND atme.AE_SCENARIO_ID = aeps.SCENARIO_ID -- So this join is to get the scenario ID to join back to the AT metadata.

  UNION -- Not union all to prevent duplicates

  -- AE component to get the maximum version for each property, regardless of it's use in Taliance.
  SELECT
      MD5_HUB_AE_PROPERTY,
      MAX(PROPERTY_VERSION)
  FROM
      DATA_VAULT.SAT_AE_PROPERTY_VERSION
  GROUP BY
      MD5_HUB_AE_PROPERTY
);

CREATE OR REPLACE TRANSIENT TABLE TRANSIENT_{SOURCE}_LEASE_VERSION AS (
  SELECT
        lp.MD5_HUB_AE_LEASE
      , tpv.PROPERTY_VERSION
  FROM
      DATA_VAULT.LINK_AE_LEASE_PROPERTY lp
      INNER JOIN DATA_VAULT.SAT_AE_LEASE_VERSION lv ON lp.MD5_HUB_AE_LEASE = lv.MD5_HUB_AE_LEASE
      INNER JOIN TRANSIENT_{SOURCE}_PROPERTY_VERSION tpv ON lp.MD5_HUB_AE_PROPERTY = tpv.MD5_HUB_AE_PROPERTY AND lv.PROPERTY_VERSION = tpv.PROPERTY_VERSION
);

CREATE OR REPLACE TRANSIENT TABLE TRANSIENT_{SOURCE}_LOAN_VERSION AS (
  SELECT
        lp.MD5_HUB_AE_LOAN
      , tpv.PROPERTY_VERSION
  FROM
      DATA_VAULT.LINK_AE_LOAN_PROPERTY lp
      INNER JOIN DATA_VAULT.SAT_AE_LOAN_VERSION lv ON lp.MD5_HUB_AE_LOAN = lv.MD5_HUB_AE_LOAN
      INNER JOIN TRANSIENT_{SOURCE}_PROPERTY_VERSION tpv ON lp.MD5_HUB_AE_PROPERTY = tpv.MD5_HUB_AE_PROPERTY AND lv.PROPERTY_VERSION = tpv.PROPERTY_VERSION
);

CREATE OR REPLACE TRANSIENT TABLE TRANSIENT_{SOURCE}_REVEX_VERSION AS (
SELECT
      rp.MD5_HUB_AE_REVEX
    , tpv.PROPERTY_VERSION
FROM
    DATA_VAULT.LINK_AE_REVEX_PROPERTY rp
    INNER JOIN DATA_VAULT.SAT_AE_REVEX_VERSION rv ON rp.MD5_HUB_AE_REVEX = rv.MD5_HUB_AE_REVEX
    INNER JOIN TRANSIENT_{SOURCE}_PROPERTY_VERSION tpv ON rp.MD5_HUB_AE_PROPERTY = tpv.MD5_HUB_AE_PROPERTY AND rv.PROPERTY_VERSION = tpv.PROPERTY_VERSION
);
