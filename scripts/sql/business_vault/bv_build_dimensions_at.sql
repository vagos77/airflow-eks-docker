/* *********************************************************************************** */
/* *** ARGUS Taliance **************************************************************** */
/* *********************************************************************************** */

/* create tables in data vault to be pivoted */

CREATE OR REPLACE TRANSIENT TABLE DATA_VAULT.TRANSIENT_AT_DIMENSION_FLOW AS
  SELECT
      MD5(UPPER(f.SCENARIO_ID || '^' || f.ENTITY_ID || '^' || COALESCE(TO_VARCHAR(f.DIMENSION_ID), ''))) AS PK_DIMENSION_FLOW_AT
    , f.MD5_HUB_AT_SCENARIO AS FK_DIMENSION_SCENARIO_AT
    , f.MD5_HUB_AT_ENTITY AS FK_DIMENSION_ENTITY_AT
    , f.DATE AS FK_DIMENSION_DATE    
    , a.DIMENSION_LABEL AS DIMENSION
    , l.LINE_ITEM_CODE AS LINE_ITEM -- FIXME use LINE_ITEM_LABEL
    , l.LINE_ITEM_CATEGORY_CODE AS CATEGORY
    , l.LINE_ITEM_TYPE AS TYPE
    , d.VALUE
  FROM DATA_VAULT.LINK_AT_FACT f
    INNER JOIN DATA_VAULT.SAT_AT_FACT_DETAILS d ON f.MD5_LINK_AT_FACT = d.MD5_LINK_AT_FACT
    INNER JOIN DATA_VAULT.SAT_AT_LINE_ITEM_DETAILS l ON f.MD5_HUB_AT_LINE_ITEM = l.MD5_HUB_AT_LINE_ITEM
    LEFT OUTER JOIN DATA_VAULT.SAT_AT_DIMENSION_DETAILS a ON f.MD5_HUB_AT_DIMENSION = a.MD5_HUB_AT_DIMENSION
  WHERE
    l.LINE_ITEM_CHARACTERISTIC = FALSE
    AND UPPER(l.LINE_ITEM_TYPE) <> 'NUMERIC'
    AND UPPER(l.LINE_ITEM_STOCK_FLOW) = 'FLOW'
    AND d.VALUE IS NOT NULL
;

CREATE OR REPLACE TRANSIENT TABLE DATA_VAULT.TRANSIENT_AT_DIMENSION_KPI AS
  SELECT
      MD5(UPPER(f.SCENARIO_ID || '^' || f.ENTITY_ID || '^' || COALESCE(TO_VARCHAR(f.DIMENSION_ID), ''))) AS PK_DIMENSION_KPI_AT
    , f.MD5_HUB_AT_SCENARIO AS FK_DIMENSION_SCENARIO_AT
    , f.MD5_HUB_AT_ENTITY AS FK_DIMENSION_ENTITY_AT
    , f.DATE AS FK_DIMENSION_DATE    
    , a.DIMENSION_LABEL AS DIMENSION
    , l.LINE_ITEM_CODE AS LINE_ITEM -- FIXME use LINE_ITEM_LABEL
    , l.LINE_ITEM_CATEGORY_CODE AS CATEGORY
    , l.LINE_ITEM_TYPE AS TYPE
    , d.VALUE
  FROM DATA_VAULT.LINK_AT_FACT f
    INNER JOIN DATA_VAULT.SAT_AT_FACT_DETAILS d ON f.MD5_LINK_AT_FACT = d.MD5_LINK_AT_FACT
    INNER JOIN DATA_VAULT.SAT_AT_LINE_ITEM_DETAILS l ON f.MD5_HUB_AT_LINE_ITEM = l.MD5_HUB_AT_LINE_ITEM
    LEFT OUTER JOIN DATA_VAULT.SAT_AT_DIMENSION_DETAILS a ON f.MD5_HUB_AT_DIMENSION = a.MD5_HUB_AT_DIMENSION
  WHERE
    l.LINE_ITEM_CHARACTERISTIC = FALSE
    AND UPPER(l.LINE_ITEM_TYPE) <> 'NUMERIC'
    AND UPPER(l.LINE_ITEM_STOCK_FLOW) = 'STOCK'
    AND d.VALUE IS NOT NULL
;

CREATE OR REPLACE TRANSIENT TABLE DATA_VAULT.TRANSIENT_AT_DIMENSION_CHARACTERISTIC AS
SELECT
    f.MD5_HUB_AT_ENTITY
  , a.DIMENSION_LABEL AS DIMENSION
  , l.LINE_ITEM_CODE AS LINE_ITEM -- FIXME use LINE_ITEM_LABEL
  , l.LINE_ITEM_TYPE AS TYPE
  , d.VALUE
FROM DATA_VAULT.LINK_AT_FACT f
  INNER JOIN DATA_VAULT.SAT_AT_FACT_DETAILS d ON f.MD5_LINK_AT_FACT = d.MD5_LINK_AT_FACT
  INNER JOIN DATA_VAULT.SAT_AT_LINE_ITEM_DETAILS l ON f.MD5_HUB_AT_LINE_ITEM = l.MD5_HUB_AT_LINE_ITEM
  LEFT OUTER JOIN DATA_VAULT.SAT_AT_DIMENSION_DETAILS a ON f.MD5_HUB_AT_DIMENSION = a.MD5_HUB_AT_DIMENSION
WHERE
  l.LINE_ITEM_CHARACTERISTIC = TRUE
  AND d.VALUE IS NOT NULL
;
     
CREATE OR REPLACE TRANSIENT TABLE DATA_VAULT.TRANSIENT_AT_DIMENSION_ENTITY AS
SELECT
    e.MD5_HUB_AT_ENTITY
  , d.ENTITY_LABEL AS ENTITY
  , y.ENTITY_TYPE_LABEL AS ENTITY_TYPE
  , d.BEGIN_DATE
  , d.END_DATE
FROM
  DATA_VAULT.HUB_AT_ENTITY e
  INNER JOIN DATA_VAULT.SAT_AT_ENTITY_DETAILS d ON e.MD5_HUB_AT_ENTITY = d.MD5_HUB_AT_ENTITY
  INNER JOIN DATA_VAULT.LINK_AT_ENTITY_ENTITY_TYPE t ON e.MD5_HUB_AT_ENTITY = t.MD5_HUB_AT_ENTITY
  INNER JOIN DATA_VAULT.SAT_AT_ENTITY_TYPE_DETAILS y ON t.MD5_HUB_AT_ENTITY_TYPE = y.MD5_HUB_AT_ENTITY_TYPE
;

/* *********************************************************************************** */
/* *** Cross-product ***************************************************************** */
/* *********************************************************************************** */

CREATE OR REPLACE TABLE DIMENSION_PLATFORM_SCENARIO AS (
  -- For platform scenarios that have both AE/AT populated nullify the AE Scenario in order to avoid duplication of data
  -- if the data is joined in non BI tools such as excel
  SELECT DISTINCT
    MD5(COALESCE(TO_VARCHAR(L.AE_SCENARIO_ID), '') || '^' || COALESCE(TO_VARCHAR(L.AT_SCENARIO_ID), '') || 'AE') AS PK_DIMENSION_PLATFORM_SCENARIO
    , IFF(L.MD5_HUB_AT_SCENARIO IS NOT NULL, MD5(''), L.MD5_HUB_AE_SCENARIO) AS PK_DIMENSION_SCENARIO_AE
    , COALESCE(L.MD5_HUB_AT_SCENARIO, MD5(''))  AS PK_DIMENSION_SCENARIO_AT
    , D.PLATFORM_SCENARIO_NAME
    , D.AT_SCENARIO_NAME
    , D.AE_SCENARIO_NAME
    , IFF(L.MD5_HUB_AT_SCENARIO IS NOT NULL,'AT', 'AE') AS SOURCE
  FROM
      DATA_VAULT.LINK_PLATFORM_SCENARIO L
      INNER JOIN DATA_VAULT.SAT_PLATFORM_SCENARIO_DETAILS D ON L.MD5_LINK_PLATFORM_SCENARIO = D.MD5_LINK_PLATFORM_SCENARIO

  -- Select AT platform scenarios only and MD5('') "nullify" the AT Scenario Key. This essentially creates two records
  -- for each AT scenario where one has AE Scenario populated but AT Null. This is necessary for the data to link
  -- correctly to AE only information where AT is null. Otherwise the records will be dropped.
  UNION
  SELECT DISTINCT
    MD5(COALESCE(TO_VARCHAR(L.AE_SCENARIO_ID), '') || '^' || COALESCE(TO_VARCHAR(L.AT_SCENARIO_ID), '') || 'AT') AS PK_DIMENSION_PLATFORM_SCENARIO
    , L.MD5_HUB_AE_SCENARIO AS PK_DIMENSION_SCENARIO_AE
    , MD5('') AS PK_DIMENSION_SCENARIO_AT
    , D.PLATFORM_SCENARIO_NAME
    , D.AT_SCENARIO_NAME
    , D.AE_SCENARIO_NAME
    , 'AT' AS SOURCE
  FROM
      DATA_VAULT.LINK_PLATFORM_SCENARIO L
      INNER JOIN DATA_VAULT.SAT_PLATFORM_SCENARIO_DETAILS D ON L.MD5_LINK_PLATFORM_SCENARIO = D.MD5_LINK_PLATFORM_SCENARIO
  WHERE L.MD5_HUB_AT_SCENARIO IS NOT NULL
);

CREATE OR REPLACE TABLE METADATA_CHANGES AS (
  SELECT
    m.MD5_HUB_AE_PROPERTY AS DIMENSION_KEY
    , 'DIMENSION_PROPERTY_AE' AS DIMENSION
    , m.RSRC AS METADATA_SOURCE
    , p.PROPERTY_VERSION AS VERSION
    , m.PROPERTY_LAST_MODIFIED_BY AS LAST_MODIFIED_BY
    , m.PROPERTY_LAST_MODIFIED_DATE AS LAST_MODIFIED_DATE
  FROM
    DATA_VAULT.PIT_AE_PROPERTY p
    INNER JOIN DATA_VAULT.SAT_AE_METADATA_PROPERTY m ON p.MD5_HUB_AE_PROPERTY = m.MD5_HUB_AE_PROPERTY AND p.LDTS_SAT_AE_METADATA_PROPERTY = m.LDTS

  UNION ALL

  SELECT
    n.MD5_HUB_AT_ENTITY AS DIMENSION_KEY
    , 'DIMENSION_ENTITY_AT' AS DIMENSION
    , n.RSRC AS METADATA_SOURCE
    , n.AE_PROPERTY_VERSION AS VERSION
    , n.ENTITY_LAST_MODIFIED_BY AS LAST_MODIFIED_BY
    , n.ENTITY_LAST_MODIFIED_DATE AS LAST_MODIFIED_DATE
  FROM
    DATA_VAULT.SAT_AT_METADATA_ENTITY n
);
